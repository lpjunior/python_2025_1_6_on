üéØ Objetivo Geral
    Desenvolver uma aplica√ß√£o web com Django que permita o cadastro de empresas e vagas de emprego, bem como o envio de candidaturas por parte de candidatos. A aplica√ß√£o deve integrar funcionalidades como formul√°rios personalizados, envio de e-mails de confirma√ß√£o, upload de curr√≠culos, autentica√ß√£o de usu√°rios, uso do ORM com filtros din√¢micos, e deploy em ambiente online.

üß© Descri√ß√£o da Aplica√ß√£o

    Voc√™ foi contratado para desenvolver o EmpregaSenac, um sistema web que conecta empresas e candidatos de forma direta. O sistema deve permitir:

    - Cadastro e gerenciamento de vagas por empresas autenticadas.
    - Visualiza√ß√£o p√∫blica de vagas e envio de candidaturas com curr√≠culo em PDF.
    - Valida√ß√£o, confirma√ß√£o e controle via e-mail.
    - Upload seguro para servi√ßo em nuvem (Cloudinary).
    - Publica√ß√£o da aplica√ß√£o com banco PostgreSQL no Render.

üîß Funcionalidades Requeridas
‚úÖ 1. Cadastro e Gerenciamento de Vagas (ModelForm + CBVs)
    - Rotas protegidas por autentica√ß√£o (login obrigat√≥rio).
    - CRUD de vagas usando CreateView, UpdateView, DeleteView e ListView.
    - Vagas devem ter: t√≠tulo, descri√ß√£o, n√≠vel, localidade, sal√°rio e empresa.

‚úÖ 2. Visualiza√ß√£o e Filtro de Vagas (ORM + Templates)
    - P√°gina p√∫blica com listagem de todas as vagas.
    - Filtros por n√≠vel e localidade via query string.

Ordena√ß√£o por data ou t√≠tulo, utilizando o ORM.

‚úÖ 3. Envio de Candidaturas (Form Manual + CBV + Upload + E-mail)
    - Formul√°rio manual para nome, e-mail, vaga e curr√≠culo (PDF).

Upload do curr√≠culo.
    - Envio de e-mail ao candidato com confirma√ß√£o e ao RH com os dados.
    - Armazenamento da candidatura no banco.

‚úÖ 4. Autentica√ß√£o
    - Cadastro e login de empresas.
    - Restri√ß√µes de acesso: somente empresas autenticadas podem criar/editar vagas.
    - Visualiza√ß√£o das candidaturas acess√≠vel somente a usu√°rios autenticados.

‚úÖ 5. Templates e Interface
    - Templates baseados em Bootstrap.
    - Feedback visual via messages (ex: ‚Äúvaga criada com sucesso‚Äù).

‚úÖ 6. Deploy
    - Hospedagem da aplica√ß√£o no Render com link p√∫blico.
    - Uso de .env para vari√°veis sens√≠veis.
    - Banco PostgreSQL (Supabase).


üåü Funcionalidades Estendidas (Desafio Opcional)
    - Testes Unit√°rios:
    - Testar ao menos uma view, uma model e um formul√°rio.
    - Pode usar unittest ou pytest-django.

Melhorias visuais e funcionais:
    - Pagina√ß√£o das vagas
    - Busca por palavra-chave
    - Responsividade aprimorada

Documenta√ß√£o do C√≥digo:
    - README explicando o projeto e como rodar
    - Coment√°rios nos trechos cr√≠ticos do c√≥digo

---

Novidades:

 - Heran√ßa entre templates
 - Composi√ß√£o de arquivos urls.py
 - Iniciamos a autentica√ß√£o (p√°gina de login)
 - Dicionario de dados (NIVEIS)

