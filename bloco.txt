📘 Aula 3 — Introdução a CBF, Model, Templates HTML, ORM

Aula Parte 1️⃣
✅ Class-based Views (CBV)

🎯 Objetivo:

    - Organizar as views de forma mais escalável e reutilizável.
    - Fazer a transição natural entre FBV (function-based views) → que eles já usaram, para CBV → um padrão mais comum em aplicações maiores.

    CBVs oferecem:

    - Mais organização (especialmente para views com vários métodos - GET, POST, PUT, etc.)
    - Facilidade de extensão e herança → permite criar padrões e reaproveitar código.
    - Melhor separação de responsabilidades.

    Quando usar CBV?

    - Em views que têm múltiplos comportamentos.
    - Quando você quer um padrão comum em toda a aplicação.
    - Quando você quer aproveitar views genéricas que o Django já oferece (ListView, DetailView, CreateView, etc).

🛠️ Atividade hands-on (CBV)
👉 Façam:

Criar uma nova rota /server-info que retorna:
    - versão do Python
    - hostname da máquina (dica: usar platform ou socket module)

Exemplo de resposta esperada:
{
  "python_version": "3.11.2",
  "hostname": "meu-computador"
}

Aula Parte 2️⃣
✅ Introdução a Templates HTML
🎯 Objetivo:

    - Usar o sistema de templates do Django.
    - Criar uma pasta de templates.
    - Renderizar páginas HTML dinâmicas.

    1. Templates servem para gerar HTML dinâmico.
        -  Em vez de responder com JsonResponse, agora você responde com uma página HTML.

    2. Django tem uma engine de templates que suporta:
        - Variáveis
        - Loops
        - Condicionais
        - Herança de templates

    3. Estrutura típica de pastas:
        app_name/
        └── templates/
            └── app_name/
                └── arquivo.html
        → Importante: sempre criar a subpasta com o nome do app → boas práticas.


📘 Aula 4 — Integração com Model + Criação e Exibição de Dados via Views

Aula Parte 1️⃣
    1. Orientações sobre a utilização do Git/Github

Aula Parte 2️⃣
🎯 Objetivos da Aula
    - Consolidar o uso de Models e Migrations
    - Implementar inserção e listagem de dados via Django ORM
    - Criar views que exibam dados reais armazenados no banco
    - Estimular boas práticas de design de dados e lógica de consulta

ORM - (Object-Relational Mapping)
    - Permite que você interaja com o banco de dados usando código(da linguagem) em vez de SQL.

Migrations
    - makemigrations - cria o script de alteração
    - migrate - aplica a alteração no banco


📘 Aula 5 — CRUD: Atualização e Remoção de registros

🎯 Objetivos da Aula
    - Compreender os conceitos de atualização(update) e remoção(delete) de dados em uma aplicação web.
    - Implementar views para editar e excluir registros de um model.
    - Trabalhar com rotas dinâmicas baseadas em id.
    - Reforçar o uso de templates, redirecionamentos e organização do código.


Aula Parte 1️⃣
    1. Explicação, implementação da atualização e hands-on


Atividade:
    Seguindo o modelo(Model) Person, implementem as funcionalidades de cadastro e atualização de pessoas.
    Na funcionalidade de edição, incluam uma validação antes do envio dos dados, exibindo a seguinte mnesagem de confirmação: "Deseja continuar?".


Aula Parte 2️⃣
    1. Explicação, implementação da exclusão e hands-on
    2. Refatorar o código usando CBV para views de book e ajuste da rota de book


CRUD:
    Create - insere uma informação na base
    Retrieve - consulta informação(ões) na base
    Update - atualiza uma informação
    Delete - exclui uma informação



