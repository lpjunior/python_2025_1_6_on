üìò Aula 3 ‚Äî Introdu√ß√£o a CBF, Model, Templates HTML, ORM

Aula Parte 1Ô∏è‚É£
‚úÖ Class-based Views (CBV)

üéØ Objetivo:

    - Organizar as views de forma mais escal√°vel e reutiliz√°vel.
    - Fazer a transi√ß√£o natural entre FBV (function-based views) ‚Üí que eles j√° usaram, para CBV ‚Üí um padr√£o mais comum em aplica√ß√µes maiores.

    CBVs oferecem:

    - Mais organiza√ß√£o (especialmente para views com v√°rios m√©todos - GET, POST, PUT, etc.)
    - Facilidade de extens√£o e heran√ßa ‚Üí permite criar padr√µes e reaproveitar c√≥digo.
    - Melhor separa√ß√£o de responsabilidades.

    Quando usar CBV?

    - Em views que t√™m m√∫ltiplos comportamentos.
    - Quando voc√™ quer um padr√£o comum em toda a aplica√ß√£o.
    - Quando voc√™ quer aproveitar views gen√©ricas que o Django j√° oferece (ListView, DetailView, CreateView, etc).

üõ†Ô∏è Atividade hands-on (CBV)
üëâ Fa√ßam:

Criar uma nova rota /server-info que retorna:
    - vers√£o do Python
    - hostname da m√°quina (dica: usar platform ou socket module)

Exemplo de resposta esperada:
{
  "python_version": "3.11.2",
  "hostname": "meu-computador"
}

Aula Parte 2Ô∏è‚É£
‚úÖ Introdu√ß√£o a Templates HTML
üéØ Objetivo:

    - Usar o sistema de templates do Django.
    - Criar uma pasta de templates.
    - Renderizar p√°ginas HTML din√¢micas.

    1. Templates servem para gerar HTML din√¢mico.
        -  Em vez de responder com JsonResponse, agora voc√™ responde com uma p√°gina HTML.

    2. Django tem uma engine de templates que suporta:
        - Vari√°veis
        - Loops
        - Condicionais
        - Heran√ßa de templates

    3. Estrutura t√≠pica de pastas:
        app_name/
        ‚îî‚îÄ‚îÄ templates/
            ‚îî‚îÄ‚îÄ app_name/
                ‚îî‚îÄ‚îÄ arquivo.html
        ‚Üí Importante: sempre criar a subpasta com o nome do app ‚Üí boas pr√°ticas.


üìò Aula 4 ‚Äî Integra√ß√£o com Model + Cria√ß√£o e Exibi√ß√£o de Dados via Views

Aula Parte 1Ô∏è‚É£
    1. Orienta√ß√µes sobre a utiliza√ß√£o do Git/Github

Aula Parte 2Ô∏è‚É£
üéØ Objetivos da Aula
    - Consolidar o uso de Models e Migrations
    - Implementar inser√ß√£o e listagem de dados via Django ORM
    - Criar views que exibam dados reais armazenados no banco
    - Estimular boas pr√°ticas de design de dados e l√≥gica de consulta

ORM - (Object-Relational Mapping)
    - Permite que voc√™ interaja com o banco de dados usando c√≥digo(da linguagem) em vez de SQL.

Migrations
    - makemigrations - cria o script de altera√ß√£o
    - migrate - aplica a altera√ß√£o no banco


üìò Aula 5 ‚Äî CRUD: Atualiza√ß√£o e Remo√ß√£o de registros

üéØ Objetivos da Aula
    - Compreender os conceitos de atualiza√ß√£o(update) e remo√ß√£o(delete) de dados em uma aplica√ß√£o web.
    - Implementar views para editar e excluir registros de um model.
    - Trabalhar com rotas din√¢micas baseadas em id.
    - Refor√ßar o uso de templates, redirecionamentos e organiza√ß√£o do c√≥digo.


Aula Parte 1Ô∏è‚É£
    1. Explica√ß√£o, implementa√ß√£o da atualiza√ß√£o e hands-on


Atividade:
    Seguindo o modelo(Model) Person, implementem as funcionalidades de cadastro e atualiza√ß√£o de pessoas.
    Na funcionalidade de edi√ß√£o, incluam uma valida√ß√£o antes do envio dos dados, exibindo a seguinte mnesagem de confirma√ß√£o: "Deseja continuar?".


Aula Parte 2Ô∏è‚É£
    1. Explica√ß√£o, implementa√ß√£o da exclus√£o e hands-on
    2. Refatorar o c√≥digo usando CBV para views de book e ajuste da rota de book


CRUD:
    Create - insere uma informa√ß√£o na base
    Retrieve - consulta informa√ß√£o(√µes) na base
    Update - atualiza uma informa√ß√£o
    Delete - exclui uma informa√ß√£o


rotas book-list x book/list

book-list

- Pr√≥s:
 - curta e direta
 - usada quando voc√™ considera "book-list" como um √∫nico recurso

- Contras
 - Foge um pouco da hierarquia RESTful.
 - Fica menos modular

book/list
- Pr√≥s
 - segue estrutura RESTful hierarquica.
    "book" seria uma categoria
    "list" o recurso dentro da categoria
 - Permite expans√£o futura
  - book/reserva


üìò Aula 6 ‚Äî Forms: Trabalhando com Django Forms (Formul√°rios din√¢micos e valida√ß√µes)

üéØ Objetivos da Aula
    - Entender o conceito e funcionamento dos formul√°rios do Django
    - Substituir formul√°rios HTML manuais por ModelForm (Hands-on)
    - Beneficios do uso do Django Forms
        - Menos c√≥digo e mais seguran√ßa
        - Valida entradas do usu√°rio de forma declarativa
        - Aprimora a manuten√ß√£o e reutiliza√ß√£o de c√≥digo em views e templates

Aula Parte 1Ô∏è‚É£
    1. Revis√£o da aula passada.
    2. Explica√ß√£o, implementa√ß√£o das m√©todos(verbos) HTTP n√£o suportados nativamente pelo HTML

    document.getElementById('book-form').addEventListener('submit', function(e) {}

    - Seleciona o formul√°rio pelo ID 'book-form'. ## document.getElementById('book-form')
    - Adiciona um 'ouvinte' de evento ao envio ('submit'). ## addEventListener('submit',
    - Quando o usu√°rio clica em 'Atualizar', a fun√ß√£o ser√° executada ## function(e) {

    e.preventDefault();

    - Impede o envio do tradicional do formul√°rio (post)
    - Permite que o JavaScript tome controle e envie os dados com o fetch.

    const form = e.target;
    const data = new FormData(form);
    const jsonData = Object.formEntries(data.entries());

    - e.target √© o pr√≥prio formul√°rio
    - FormData(form) cria um objeto com todos os campos do formul√°rio
    - Object.formEntries(data.entries()) converte o FormData em um objeto literal JavaScript
    - entries() retorna pare de chaves [chave, valor], e Object.formEntries monta o objeto

    fetch()

    - Envia a requisi√ß√£o HTTP para a URL atual ('window.location.href'), com o m√©todo PUT

    method: 'PUT'
    - Define o m√©todo de envio como PUT

    Headers

    'Content-Type': 'application/json': indica que o corpo da requisi√ß√£o ser√° em JSON
    'X-CSRFToken': {{ csrf_token }}: necess√°rio para o Django validar o token CSFR

    body: JSON.stringify(jsonData)

    - transforma o objeto em text JSON para envio

    .then(res => res.json())
    .then(data => {
        alert('Atualizado com sucesso!');
        window.location.href = "{% url 'book_list' %}";
    });

    - Espera a resposta do servidor
    - Converte a resposta em JSON
    - Mostra um alerta e redireciona para a listagem


Aula Parte 2Ô∏è‚É£
    1. Explica√ß√£o, implementa√ß√£o do Django forms

    Existe 2 tipos:
        - forms.Form: formul√°rio gen√©rico sem liga√ß√£o com o banco de dados
        - forms.ModelForm: formul√°rio baseado em um Model, cria automaticamente


üìò Aula 7 ‚Äî Forms: Aprofundando Django Forms (Valida√ß√µes, personaliza√ß√µes e formul√°rios manuais)

üéØ Objetivos da Aula
    - Comprrender os conceitos de ModelForm e Form manual
    - Aplicar valida√ß√µes personalizadas em formul√°rios
    - Customizar labels, help_texts e widgets nos campos de formul√°rios

Aula Parte 1Ô∏è‚É£
    1. Revis√£o da aula passada.
    2. Valida√ß√µes, personizaliza√ß√µes.
    3. Explica√ß√£o sobre os write case (formas de escrita)

Tipos de escrita (write case)
- Pascal Case (ou Upper Camel Case)
    Primeira letra mai√∫scula, novas palavras com a primeira letra mai√∫scula
    Usado por linguagens como: Java, C#, Python (para classes), TypeScript

    Usado para: nomear classes, tipos e enums

    Exemplo:
    - Book
    - HistoryBook
    - RelatorioFinanceiro

- Camel Case
    Primeira letra min√∫scula, novas palavras com a primeira letra mai√∫scula
    Usado por linguagens como: Java, JavaScript, C#, TypeScript

    Usado para: nomear atributos, vari√°veis e m√©todos

    Exemplo:
    - historyBook
    - Book
    - relatorioFinanceiro

- Snake Case
    Palavras separadas por underline, tudo em min√∫sculo
    Usado por linguagens como: Python , Ruby

    Usado para: nomear atributos, fun√ß√µes, modulos

    Exemplo:
    - numero_conta
    - history_book
    - published_date

- Constant Case
    Palavras separadas por underline, tudo em mai√∫sculo.
    Usado por linguagens como: Python, C, C++, Java, C#

    Usado para: nomear constantes (valores imut√°veis)

    Exemplo:
    - PI
    - TAXA_JUROS
    - LIMITE_MAXIMO

Aula Parte 2Ô∏è‚É£
    1. hands-on (projeto Gerenciador de tarefas pessoais).
    2. Form manual.


üìò Aula 8 - Banco de dados Relacional - parte 1

üéØ Objetivos da Aula
    - Entender o que √© um banco de dados
    - Entender sobre dados estruturados e n√£o estruturados
    - Conceito de tabelas, linhas(registros) e colunas(atributos)
    - Chaves prim√°rias e estrangeiras
    - Rela√ß√£o entre tabelas 1:1, 1:N e N:N
    - Migra√ß√£o SQLite para PostgreSQL

Aula Parte 1Ô∏è‚É£
    1. Entendendo sobre banco de dados

Aula Parte 2Ô∏è‚É£
    1. hands-on configura√ß√£o e migra√ß√£o da app para o Supabase
    2. hands-on trabalhando com SQL

üìò Aula 9 - Banco de dados Relacional - parte 2

üéØ Objetivos da Aula
    - Entender sobre as vers√µes do uuid
    - Consolidar o entendimento de comandos SQL na pr√°tica
    - Relacionar comandos SQL com o uso do ORM do Django
    - (Introdu√ß√£o) Vari√°veis de ambiente e arquivos .env

Aula Parte 1Ô∏è‚É£
    1. Entendendo sobre banco de dados

Aula Parte 2Ô∏è‚É£
    1. hands-on configura√ß√£o e migra√ß√£o da app para o Supabase
    2. hands-on trabalhando com SQL

O m√≥dulo uuid suporta cinco vers√µes principais de UUIDs.
vers√£o | Nome           | Fonte                                                       | Caso de uso
   1   | Time-based     | Data/hora + MAC do host                                     | Sistemas que precisam de UUIDs orden√°veis pelo tempo. Ex.: Log distribu√≠dos que devem manter a ordem cronol√≥gica.
   2   | DCE Security   | Similar ao v1, com suporte UID/GID                          | Controle de acesso embutido do Unix nos UUIDs
   3   | Name-based     | Hash MD5 de uma namespace + nome                            | Quando se precisa do mesmo UUID gerado a partir de um nome fixo. (O mesmo input gera sempre o mesmo UUID)
   4   | Random         | Aleat√≥rio (usando um gerador de n√∫meros aleat√≥rios seguros) | Identificador de transa√ß√µes, objetos, requisi√ß√µes, etc.
   5   | Name-based     | Hash SHA-1 de um namespace + nome                           | URL, DNS, chaves de cache, etc.(O mesmo input gera sempre o mesmo UUID)

DBA <- configura rotinas de backup
backup 10h rodou as 15h01m


caso de uso: a necessidade do sistema/usu√°rio precisa que seja implementado

3 ambientes
dev - ambiente do desenvolvedor (testes)
uat/hml - ambiente de testes do usu√°rio do sistema
prod - ambiente final onde a aplica√ß√£o ir√° estar executando (produ√ß√£o)

De/Para SQL x ORM do Django

            SQL                     |       Django ORM
SELECT * FROM public.contacts       |   Contact.objects.all()
WHERE first_name ilike 'Luis'       |   Contact.objects.filter(first_name='Luis')
INSERT INTO                         |   Contact.objects.create(...)
UPDATE                              |   c.fist_name = 'Luis Paulo'; c.save()
DELETE                              |   c.delete()

üìò Aula 10 - Envio de e-mail, Upload de arquivos e Deploy no Render - parte 1

üéØ Objetivos da Aula
    - Configurar envio de e-mails no Django (servidor Gmail)
    - Implementar upload de arquivos localmente
    - Enviar e-mails com arquivo anexado
    - Publicar o projeto na nuvem (Render)

Aula Parte 1Ô∏è‚É£
    1. Envio de e-mail (servidor Gmail)

Aula Parte 2Ô∏è‚É£
    1. Upload de arquivos e envio do path no email
    1. Comparativo upload local x remoto


üìò Aula 11 - Upload de arquivos e Deploy no Render - parte 2

üéØ Objetivos da Aula
    - Implementar upload com servi√ßo remoto (Cloudinary)
    - Publicar o projeto na nuvem (Render)

Aula Parte 1Ô∏è‚É£
    1. Upload de arquivos em servi√ßo remoto
    2. Publicar projeto na nuvem

Aula Parte 2Ô∏è‚É£
    1.